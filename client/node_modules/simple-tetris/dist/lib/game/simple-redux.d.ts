export interface IAction {
    type: string;
}
export interface IThunkAction<S> extends IAction {
    executeThunk(store: S): void;
}
export declare type Reducer<S> = (state: S, action: IAction) => S;
export interface IReducerMap<S> {
    [key: string]: Reducer<S>;
}
export declare class SimpleStore<S> {
    protected reducer: Reducer<S>;
    protected state: S;
    constructor(reducer: Reducer<S>);
    dispatch(action: IAction | IThunkAction<SimpleStore<S>>): void;
    getState(): S;
}
